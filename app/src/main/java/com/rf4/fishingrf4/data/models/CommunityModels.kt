// ==========================================
// FICHIER: data/models/CommunityModels.kt
// Mod√®les pour les signalements de bugs et suggestions de poissons
// ==========================================

package com.rf4.fishingrf4.data.models

import kotlinx.serialization.Serializable

/**
 * Mod√®le pour un signalement de bug
 */
@Serializable
data class BugReport(
    val id: String = java.util.UUID.randomUUID().toString(),
    val userId: String = "",
    val userName: String = "",
    val email: String = "",
    val title: String = "",
    val description: String = "",
    val bugType: BugType = BugType.GAMEPLAY,
    val priority: BugPriority = BugPriority.LOW,
    val status: BugStatus = BugStatus.OPEN,
    val deviceInfo: String = "",
    val appVersion: String = "",
    val reproductionSteps: String = "",
    val expectedBehavior: String = "",
    val actualBehavior: String = "",
    val screenshot: String? = null, // Base64 ou URL
    val createdAt: Long = System.currentTimeMillis(),
    val updatedAt: Long = System.currentTimeMillis(),
    val adminNotes: String = ""
)

/**
 * Types de bugs possibles
 */
enum class BugType(val displayName: String) {
    GAMEPLAY("üéÆ Gameplay"),
    UI_UX("üñ±Ô∏è Interface"),
    DATA("üìä Donn√©es"),
    PERFORMANCE("‚ö° Performance"),
    CRASH("üí• Plantage"),
    NETWORK("üåê R√©seau"),
    AUDIO("üîä Audio"),
    VISUAL("üëÅÔ∏è Visuel"),
    OTHER("üîß Autre")
}

/**
 * Priorit√©s des bugs
 */
enum class BugPriority(val displayName: String, val colorValue: Long) {
    LOW("üü¢ Faible", 0xFF10B981),
    MEDIUM("üü° Moyenne", 0xFFF59E0B),
    HIGH("üü† √âlev√©e", 0xFFEF4444),
    CRITICAL("üî¥ Critique", 0xFF991B1B)
}

/**
 * Statuts des bugs
 */
enum class BugStatus(val displayName: String, val colorValue: Long) {
    OPEN("üÜï Ouvert", 0xFF3B82F6),
    IN_PROGRESS("‚è≥ En cours", 0xFFF59E0B),
    TESTING("üß™ En test", 0xFF8B5CF6),
    RESOLVED("‚úÖ R√©solu", 0xFF10B981),
    CLOSED("üîí Ferm√©", 0xFF6B7280),
    WONT_FIX("‚ùå Non corrig√©", 0xFFEF4444)
}

/**
 * Mod√®le pour une suggestion de poisson
 */
@Serializable
data class FishSuggestion(
    val id: String = java.util.UUID.randomUUID().toString(),
    val userId: String = "",
    val userName: String = "",
    val email: String = "",
    val fishName: String = "",
    val scientificName: String = "",
    val description: String = "",
    val suggestedLakes: List<String> = emptyList(),
    val preferredBaits: List<String> = emptyList(),
    val rarity: FishRarity = FishRarity.COMMON,
    val minWeight: Double = 0.0,
    val maxWeight: Double = 0.0,
    val bestHours: List<Int> = emptyList(),
    val bestWeather: List<WeatherType> = emptyList(),
    val imageUrl: String? = null,
    val sourceUrl: String? = null, // Source d'information
    val justification: String = "", // Pourquoi ce poisson devrait √™tre ajout√©
    val votes: Int = 0,
    val status: SuggestionStatus = SuggestionStatus.PENDING,
    val createdAt: Long = System.currentTimeMillis(),
    val updatedAt: Long = System.currentTimeMillis(),
    val adminNotes: String = ""
)

/**
 * Statuts des suggestions
 */
enum class SuggestionStatus(val displayName: String, val colorValue: Long) {
    PENDING("‚è≥ En attente", 0xFFF59E0B),
    UNDER_REVIEW("üîç En r√©vision", 0xFF3B82F6),
    APPROVED("‚úÖ Approuv√©e", 0xFF10B981),
    REJECTED("‚ùå Rejet√©e", 0xFFEF4444),
    IMPLEMENTED("üéâ Impl√©ment√©e", 0xFF8B5CF6)
}

/**
 * Vote sur une suggestion de poisson
 */
@Serializable
data class FishVote(
    val id: String = java.util.UUID.randomUUID().toString(),
    val userId: String = "",
    val suggestionId: String = "",
    val voteType: VoteType = VoteType.UPVOTE,
    val createdAt: Long = System.currentTimeMillis()
)

/**
 * Types de votes
 */
enum class VoteType {
    UPVOTE, // Pour
    DOWNVOTE // Contre
}

/**
 * Commentaire sur une suggestion
 */
@Serializable
data class SuggestionComment(
    val id: String = java.util.UUID.randomUUID().toString(),
    val userId: String = "",
    val userName: String = "",
    val suggestionId: String = "",
    val content: String = "",
    val isAdmin: Boolean = false,
    val createdAt: Long = System.currentTimeMillis()
)